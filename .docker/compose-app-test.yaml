version: '3'

services:
  dynamodb:
    image: cnadiminti/dynamodb-local:latest
    ports:
      - 8000:8000
    restart: always

  init-dynamodb:
    image: garland/aws-cli-docker
    command:
      - /bin/sh
      - -c
      - |
          echo "Initilizing DynamoDB tables"
          aws dynamodb create-table --table-name pages --attribute-definitions AttributeName=id,AttributeType=S --key-schema AttributeName=id,KeyType=HASH --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=1 --endpoint-url http://dynamodb:8000 || echo "pages table already existed"
          aws dynamodb create-table --table-name sessions --attribute-definitions AttributeName=id,AttributeType=S --key-schema AttributeName=id,KeyType=HASH --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=1 --endpoint-url http://dynamodb:8000  || echo "sessions table already existed"
    environment:
      - AWS_ACCESS_KEY_ID=0
      - AWS_SECRET_ACCESS_KEY=0
      - AWS_DEFAULT_REGION=localhost
    depends_on:
      - dynamodb
  test-admin:
    build:
      context: ../
      dockerfile: .docker/Dockerfile
    command: node /app/src/app-admin
    env_file:
      - ./local.env
    ports:
      - "4000:3000"
    restart: always
    depends_on:
      - init-dynamodb
  test-api:
    build:
      context: ../
      dockerfile: .docker/Dockerfile
    command: node /app/src/app-api
    env_file:
      - ./local.env
    ports:
      - "4001:3000"
    restart: always
    depends_on:
      - init-dynamodb
  test-oauth:
    build:
      context: ../
      dockerfile: .docker/Dockerfile
    command: node /app/src/app-oauth
    env_file:
      - ./local.env
    ports:
      - "4002:3000"
    restart: always
    depends_on:
      - init-dynamodb
  test-web:
    build:
      context: ../
      dockerfile: .docker/Dockerfile
    command: node /app/src/app-web
    env_file:
      - ./local.env
    ports:
      - "4003:3000"
    restart: always
    depends_on:
      - init-dynamodb
